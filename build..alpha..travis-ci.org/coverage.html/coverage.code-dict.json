{"/home/travis/build/npmtest/node-npmtest-html-looks-like/test.js":"/* istanbul instrument in package npmtest_html_looks_like */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-html-looks-like/lib.npmtest_html_looks_like.js":"/* istanbul instrument in package npmtest_html_looks_like */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_html_looks_like = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_html_looks_like = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-html-looks-like/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-html-looks-like && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_html_looks_like */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_html_looks_like\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_html_looks_like.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_html_looks_like.rollup.js'] =\n            local.assetsDict['/assets.npmtest_html_looks_like.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_html_looks_like.__dirname + '/lib.npmtest_html_looks_like.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-html-looks-like/node_modules/html-looks-like/lib/index.js":"\"use strict\";\nvar jsdom = require(\"jsdom\");\nvar domWalk = require(\"domwalk\");\nvar diff_1 = require(\"./diff\");\nvar report_1 = require(\"./report\");\nfunction trimTextNode(node) {\n    if (node.nodeType === 3) {\n        var trimmedText = node.textContent.trim();\n        if (trimmedText.length === 0) {\n            node.parentNode.removeChild(node);\n        }\n        else {\n            node.textContent = trimmedText;\n        }\n    }\n}\nfunction makeDocsAndDiff(actual, expected) {\n    var actualDoc = jsdom.jsdom(actual);\n    domWalk(actualDoc, trimTextNode);\n    var expectedWithWildcards = expected\n        .replace(/{{[^}]*}}/g, '<!--$ignored-wildcard-element$-->');\n    var expectedDoc = jsdom.jsdom(expectedWithWildcards);\n    domWalk(expectedDoc, trimTextNode);\n    var diffs = diff_1.makeDiff(actualDoc, expectedDoc);\n    return [diffs, actualDoc, expectedDoc];\n}\nvar htmlLooksLike = (function (actual, expected) {\n    var _a = makeDocsAndDiff(actual, expected), diffs = _a[0], actualDoc = _a[1], expectedDoc = _a[2];\n    if (diffs.length > 0) {\n        report_1.reportMismatches(diffs, actualDoc, expectedDoc);\n    }\n});\nhtmlLooksLike.bool = function (actual, expected) {\n    var diffs = makeDocsAndDiff(actual, expected)[0];\n    return diffs.length === 0;\n};\nmodule.exports = htmlLooksLike;\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-html-looks-like/node_modules/html-looks-like/lib/diff.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DiffDOM = require(\"diff-dom\");\nvar stableSort = require(\"lodash.sortby\");\nvar dd = new DiffDOM();\nfunction splitReplaceDiff(diff) {\n    if (diff.action !== 'replaceElement') {\n        return [diff];\n    }\n    if (!isWildcardComment(diff.oldValue)) {\n        return [diff];\n    }\n    var removeDiff = {\n        action: 'removeElement',\n        route: diff.route,\n        element: diff.oldValue,\n    };\n    var addDiff = {\n        action: 'addElement',\n        route: diff.route,\n        element: diff.newValue,\n    };\n    return [removeDiff, addDiff];\n}\nfunction areRoutesAdjacent(diffA, diffB) {\n    var routeA = diffA.route.join('');\n    var routeB = diffB.route.join('');\n    var prefixA = routeA.substring(0, routeA.length - 1);\n    var prefixB = routeB.substring(0, routeB.length - 1);\n    var lastA = diffA.route[diffA.route.length - 1];\n    var lastB = diffB.route[diffB.route.length - 1];\n    return routeA.length === routeB.length\n        && prefixA === prefixB\n        && (lastA === lastB || lastA + 1 === lastB);\n}\nfunction groupByWildcard(groups, diff, index, diffs) {\n    var group = groups[groups.length - 1];\n    var firstInGroup = group[0];\n    var lastInGroup = group[group.length - 1];\n    if (firstInGroup\n        && isRemoveWildcardDiff(firstInGroup)\n        && lastInGroup\n        && areRoutesAdjacent(lastInGroup, diff)\n        && isAddSomethingDiff(diff)) {\n        group.push(diff);\n    }\n    else {\n        groups.push([diff]);\n    }\n    return groups;\n}\nfunction isAddAttribute(diff) {\n    return diff.action === 'addAttribute';\n}\nfunction isWildcardComment(element) {\n    return element.nodeName === '#comment'\n        && element.data.trim() === '$ignored-wildcard-element$';\n}\nfunction isRemoveWildcardDiff(diff) {\n    return diff.action === 'removeElement' && isWildcardComment(diff.element);\n}\nfunction isAddElementDiff(diff) {\n    return diff.action === 'addElement';\n}\nfunction isAddTextElementDiff(diff) {\n    return diff.action === 'addTextElement';\n}\nfunction isAddSomethingDiff(diff) {\n    return isAddElementDiff(diff) || isAddTextElementDiff(diff);\n}\nfunction makeDiff(actualDoc, expectedDoc) {\n    var diffs1 = dd.diff(expectedDoc, actualDoc);\n    var diffs2 = stableSort(diffs1, function (d) { return d.route.join(''); });\n    var diffs = diffs2\n        .map(splitReplaceDiff)\n        .reduce(function (a, b) { return a.concat(b); }, [])\n        .filter(function (d) { return !isAddAttribute(d); })\n        .reduce(groupByWildcard, [[]])\n        .filter(function (group) { return group.length > 0 && !isRemoveWildcardDiff(group[0]); })\n        .reduce(function (a, b) { return a.concat(b); }, []);\n    return diffs;\n}\nexports.makeDiff = makeDiff;\n//# sourceMappingURL=diff.js.map","/home/travis/build/npmtest/node-npmtest-html-looks-like/node_modules/html-looks-like/lib/report.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction routeToNode(doc, route) {\n    var ref = doc;\n    route.forEach(function (i) {\n        ref = ref.childNodes[i];\n    });\n    return ref;\n}\nfunction serializeTextNodeObj(nodeObj) {\n    return nodeObj.data;\n}\nfunction serializeCommentNodeObj(nodeObj) {\n    return \"<!--\" + nodeObj.data + \"-->\";\n}\nfunction serializeElementNodeObj(nodeObj) {\n    if (typeof nodeObj.attributes === 'undefined') {\n        nodeObj.attributes = {};\n    }\n    if (typeof nodeObj.childNodes === 'undefined') {\n        nodeObj.childNodes = [];\n    }\n    var tagName = nodeObj.nodeName.toLowerCase();\n    var attrs = Object.keys(nodeObj.attributes)\n        .map(function (name) { return name + \"=\\\"\" + nodeObj.attributes[name] + \"\\\"\"; });\n    var head = [tagName].concat(attrs).join(' ');\n    var children = nodeObj.childNodes.map(serializeNodeObj).join('');\n    return \"<\" + head + \">\" + children + \"</\" + tagName + \">\";\n}\nfunction serializeNodeObj(nodeObj) {\n    if (nodeObj.nodeName === '#text') {\n        return serializeTextNodeObj(nodeObj);\n    }\n    else if (nodeObj.nodeName === '#comment') {\n        return serializeCommentNodeObj(nodeObj);\n    }\n    else if (nodeObj.nodeName[0] !== '#') {\n        return serializeElementNodeObj(nodeObj);\n    }\n    else {\n        return \"serializeNodeObj(\" + JSON.stringify(nodeObj) + \")\";\n    }\n}\nfunction mdHTML(html) {\n    return '```html\\n' + html + '\\n```';\n}\nfunction renderMismatch(diff, actualDoc, expectedDoc) {\n    if (diff.action === 'addElement') {\n        var snippet = mdHTML(serializeNodeObj(diff.element));\n        return \"HTML has an unexpected element\\n\" + snippet;\n    }\n    else if (diff.action === 'removeElement') {\n        var snippet = mdHTML(serializeNodeObj(diff.element));\n        return \"HTML is missing the expected element\\n\" + snippet;\n    }\n    else if (diff.action === 'removeAttribute') {\n        var node = routeToNode(actualDoc, diff.route) || '???';\n        var attr = diff.name + \"=\\\"\" + diff.value + \"\\\"\";\n        var snippet = mdHTML(node.outerHTML || node.toString());\n        return \"HTML is missing the attribute `\" + attr + \"` on the element\\n\" + snippet;\n    }\n    else if (diff.action === 'replaceElement') {\n        var eSnippet = mdHTML(serializeNodeObj(diff.oldValue));\n        var aSnippept = mdHTML(serializeNodeObj(diff.newValue));\n        return \"HTML expected element\\n\" + eSnippet + \"\\nbut got element\\n\" + aSnippept;\n    }\n    else if (diff.action === 'modifyAttribute') {\n        var node = routeToNode(expectedDoc, diff.route) || '???';\n        var htmlSnippet = mdHTML(node.outerHTML || node.toString());\n        var eSnippet = diff.oldValue;\n        var aSnippet = diff.newValue;\n        return \"HTML mismatch on attribute `\" + diff.name + \"` in element\\n\" + htmlSnippet + \"\\n\" +\n            (\"Expected\\n\" + eSnippet + \"\\nbut got\\n\" + aSnippet);\n    }\n    else if (diff.action === 'addTextElement') {\n        return \"HTML has an unexpected text\\n\" + diff.value;\n    }\n    else if (diff.action === 'removeTextElement') {\n        return \"HTML is missing the expected text\\n\" + diff.value;\n    }\n    else if (diff.action === 'modifyTextElement') {\n        var eSnippet = diff.oldValue;\n        var aSnippet = diff.newValue;\n        return \"HTML text mismatch. Expected\\n\" + eSnippet + \"\\nbut got\\n\" + aSnippet;\n    }\n    else {\n        return \"renderMismatch(\" + JSON.stringify(diff) + \")\";\n    }\n}\nfunction reportMismatches(diffs, actualDoc, expectedDoc) {\n    var msg = diffs\n        .map(function (d) { return renderMismatch(d, actualDoc, expectedDoc); })\n        .join('\\n\\n');\n    throw new Error(msg);\n}\nexports.reportMismatches = reportMismatches;\n//# sourceMappingURL=report.js.map","/home/travis/build/npmtest/node-npmtest-html-looks-like/node_modules/html-looks-like/lib/types.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map"}